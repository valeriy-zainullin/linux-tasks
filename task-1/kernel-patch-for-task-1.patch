diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/arch/x86/entry/syscalls/syscall_64.tbl linux-6.11/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-orig/linux-6.11/arch/x86/entry/syscalls/syscall_64.tbl	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/arch/x86/entry/syscalls/syscall_64.tbl	2024-10-23 00:26:23.382011643 +0300
@@ -386,6 +386,9 @@
 460	common	lsm_set_self_attr	sys_lsm_set_self_attr
 461	common	lsm_list_modules	sys_lsm_list_modules
 462 	common  mseal			sys_mseal
+463	common	add_user	sys_add_user
+464	common	get_user	sys_get_user
+465	common	del_user	sys_del_user
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/fs/char_dev.c linux-6.11/fs/char_dev.c
--- linux-orig/linux-6.11/fs/char_dev.c	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/fs/char_dev.c	2024-10-21 16:56:37.308855282 +0300
@@ -409,6 +409,8 @@
 	if (!fops)
 		goto out_cdev_put;
 
+	// printk(KERN_INFO "char_dev.c:chrdev_open replacing fops\n");
+
 	replace_fops(filp, fops);
 	if (filp->f_op->open) {
 		ret = filp->f_op->open(inode, filp);
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/fs/exec.c linux-6.11/fs/exec.c
--- linux-orig/linux-6.11/fs/exec.c	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/fs/exec.c	2024-10-21 16:25:57.970247536 +0300
@@ -1898,8 +1898,10 @@
 	int retval;
 
 	retval = prepare_bprm_creds(bprm);
-	if (retval)
+	if (retval) {
+		printk("bprm_execve for file %s: prepare_bprm_creds failed", bprm->filename);
 		return retval;
+	}
 
 	/*
 	 * Check for unsafe execution states before exec_binprm(), which
@@ -1914,12 +1916,16 @@
 
 	/* Set the unchanging part of bprm->cred */
 	retval = security_bprm_creds_for_exec(bprm);
-	if (retval)
+	if (retval) {
+		printk("bprm_execve for file %s: security_bprm_creds_for_exec failed", bprm->filename);
 		goto out;
+	}
 
 	retval = exec_binprm(bprm);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("bprm_execve for file %s: exec_binprm failed", bprm->filename);
 		goto out;
+	}
 
 	sched_mm_cid_after_execve(current);
 	/* execve succeeded */
@@ -1953,11 +1959,14 @@
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+	// printk("do_execveat_common with filename = %s: #1.\n", filename->name);
 	struct linux_binprm *bprm;
 	int retval;
 
-	if (IS_ERR(filename))
+	if (IS_ERR(filename)) {
+		printk("do_execveat_common with filename = %s: #2.\n", filename->name);
 		return PTR_ERR(filename);
+	}
 
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
@@ -1967,6 +1976,7 @@
 	 */
 	if ((current->flags & PF_NPROC_EXCEEDED) &&
 	    is_rlimit_overlimit(current_ucounts(), UCOUNT_RLIMIT_NPROC, rlimit(RLIMIT_NPROC))) {
+		printk("do_execveat_common with filename = %s: #3.\n", filename->name);
 		retval = -EAGAIN;
 		goto out_ret;
 	}
@@ -1977,6 +1987,7 @@
 
 	bprm = alloc_bprm(fd, filename, flags);
 	if (IS_ERR(bprm)) {
+		printk("do_execveat_common with filename = %s: #4.\n", filename->name);
 		retval = PTR_ERR(bprm);
 		goto out_ret;
 	}
@@ -1985,31 +1996,43 @@
 	if (retval == 0)
 		pr_warn_once("process '%s' launched '%s' with NULL argv: empty string added\n",
 			     current->comm, bprm->filename);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #5.\n", filename->name);
 		goto out_free;
+	}
 	bprm->argc = retval;
 
 	retval = count(envp, MAX_ARG_STRINGS);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #6.\n", filename->name);
 		goto out_free;
+	}
 	bprm->envc = retval;
 
 	retval = bprm_stack_limits(bprm);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #7.\n", filename->name);
 		goto out_free;
+	}
 
 	retval = copy_string_kernel(bprm->filename, bprm);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #8.\n", filename->name);
 		goto out_free;
+	}
 	bprm->exec = bprm->p;
 
 	retval = copy_strings(bprm->envc, envp, bprm);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #9.\n", filename->name);
 		goto out_free;
+	}
 
 	retval = copy_strings(bprm->argc, argv, bprm);
-	if (retval < 0)
+	if (retval < 0) {
+		printk("do_execveat_common with filename = %s: #10.\n", filename->name);
 		goto out_free;
+	}
 
 	/*
 	 * When argv is empty, add an empty string ("") as argv[0] to
@@ -2018,12 +2041,16 @@
 	 * bprm_stack_limits().
 	 */
 	if (bprm->argc == 0) {
+		printk("do_execveat_common with filename = %s: #11.\n", filename->name);
 		retval = copy_string_kernel("", bprm);
-		if (retval < 0)
+		if (retval < 0) {
+			printk("do_execveat_common with filename = %s: #12.\n", filename->name);
 			goto out_free;
+		}
 		bprm->argc = 1;
 	}
 
+	// printk("do_execveat_common with filename = %s: goes to bprm_execve.\n", filename->name);
 	retval = bprm_execve(bprm);
 out_free:
 	free_bprm(bprm);
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/fs/read_write.c linux-6.11/fs/read_write.c
--- linux-orig/linux-6.11/fs/read_write.c	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/fs/read_write.c	2024-10-17 14:02:56.730172412 +0300
@@ -571,6 +571,8 @@
 {
 	ssize_t ret;
 
+	// printk(KERN_INFO "vfs_write of length %zu, going to call file->f_op->write_iter = %p.\n", count, file->f_op->write_iter);
+
 	if (!(file->f_mode & FMODE_WRITE))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_WRITE))
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/ipc/Makefile linux-6.11/ipc/Makefile
--- linux-orig/linux-6.11/ipc/Makefile	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/ipc/Makefile	2024-10-22 21:53:46.148398374 +0300
@@ -10,3 +10,4 @@
 obj-$(CONFIG_IPC_NS) += namespace.o
 obj-$(CONFIG_POSIX_MQUEUE_SYSCTL) += mq_sysctl.o
 
+obj-y += phonebook/
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/ipc/phonebook/Kconfig linux-6.11/ipc/phonebook/Kconfig
--- linux-orig/linux-6.11/ipc/phonebook/Kconfig	1970-01-01 03:00:00.000000000 +0300
+++ linux-6.11/ipc/phonebook/Kconfig	2024-10-22 20:14:40.376856117 +0300
@@ -0,0 +1,13 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# Phonebook syscalls configuration
+#
+
+config PHONEBOOK
+	bool "Phonebook syscalls"
+	default y
+	help
+	  Support for phonebook syscalls.
+
+	  To compile this protocol support as a module, choose M here: the
+	  module will be called ipv6.
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/ipc/phonebook/Makefile linux-6.11/ipc/phonebook/Makefile
--- linux-orig/linux-6.11/ipc/phonebook/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ linux-6.11/ipc/phonebook/Makefile	2024-10-22 22:02:24.848402625 +0300
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# Makefile for phonebook syscalls
+#
+
+obj-$(CONFIG_PHONEBOOK) += phonebook.o
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/ipc/phonebook/phonebook.c linux-6.11/ipc/phonebook/phonebook.c
--- linux-orig/linux-6.11/ipc/phonebook/phonebook.c	1970-01-01 03:00:00.000000000 +0300
+++ linux-6.11/ipc/phonebook/phonebook.c	2024-10-23 04:38:40.595621935 +0300
@@ -0,0 +1,226 @@
+/*
+ * Phonebook subsystem for Linux.
+ *
+ * Copyright (C) 2024       Valeriy Zainullin       (zainullin.vv@phystech.edu)
+ *
+ * This file is released under the GPL.
+ */
+
+#include <linux/kernel.h>
+#include <linux/mutex.h>
+#include <linux/module.h>
+#include <linux/syscalls.h>
+
+#include "phonebook.h"
+
+// From module subsystem internals. $(linux_src)/kernel/module/internal.h
+extern struct mutex module_mutex;
+
+// https://stackoverflow.com/questions/23013562/linux-kernel-get-function-address-for-kernel-driver
+
+typedef long (*pb_get_user_t)(const char* surname, unsigned int len, struct pb_user_data* output_data);
+
+typedef long (*pb_add_user_t)(struct pb_user_data* input_data);
+
+// Удаляет всех пользователей с такой фамилией.
+typedef long (*pb_del_user_t)(const char* surname, unsigned int len);
+
+// GFP_KERNEL_ACCOUNT.
+// https://www.kernel.org/doc/html/next/core-api/memory-allocation.html
+
+static struct module* find_pb_module(void) {
+	// Race condition с выгрузкой модуля... Надо какой-то mutex
+	//   взять в ядре на загрузку выгрузку модулей. Но это плохо,
+	//   один процесс может положить всю работу. Надо запретить
+	//   выгружать модуль..
+	// https://stackoverflow.com/questions/63867813/stop-unloading-the-linux-kernel-module
+
+	// С try_module_get есть проблема: он принимает struct module*, которого
+	//   у нас еще нет. Если посмотреть комментарий к нему в заголовке, то мы
+	//   еще должны убедиться, что модуль не выгружается.
+	// Вдохновимся: https://stackoverflow.com/questions/10627738/check-if-linux-kernel-module-is-running
+	//   Мы сделаем так: возьмем mutex на загрузку модулей, найдем наш. Не нашли -- вернем
+	//   ошибку. Нашли -- увеличиваем refcount (счетчик ссылок) c помощью
+	//   try_module_get, пока держим mutex. Вроде, try_module_get не берет
+	//   этот mutex внутри себя. Он буквально идет в структуру и увеличивает
+	//   atomic с количеством ссылок.
+	mutex_lock(&module_mutex);
+
+	struct module* mod = find_module("phonebook");
+	if (mod == NULL) {
+		mutex_unlock(&module_mutex);
+		return NULL;
+	}
+
+	if (!try_module_get(mod)) {
+		// Видимо, модуль в текущий момент выгружается.
+		mutex_unlock(&module_mutex);
+		return NULL;
+	}
+
+	// Модуль уже будет жить, мы взяли на него ссылку, refcount не станет
+	//   нулевым из-за нашей ссылки. Отпускаем mutex, вернем ссылку.
+	mutex_unlock(&module_mutex);
+	return mod;
+}
+
+SYSCALL_DEFINE1(add_user, struct pb_user_data* __user, ud) {
+	struct module* pb_mod = find_pb_module();
+	if (pb_mod == NULL) {
+		return -ENODEV;
+	}
+
+	// Поиск по kernel/module/kallsyms.c дал результаты, удалось найти функцию,
+	//   которая ищет в модуле, если у нас есть struct module*, заданный
+	//   символ.
+	// Значением символа с названием функции будет ее адрес в памяти,
+	//   занятой модулем после загрузки.
+	pb_add_user_t func = (pb_add_user_t) find_kallsyms_symbol_value(pb_mod, "pb_add_user");
+	if (func == NULL) {
+		// Мы "брали" модуль (увеличивали счетчик ссылок), теперь положим,
+		//   чтобы его могли выгрузить при необходимости.
+		module_put(pb_mod);
+		return -ENODEV;
+	}
+
+	struct pb_user_data* copied_ud = kzalloc(sizeof(struct pb_user_data), GFP_KERNEL_ACCOUNT);
+	if (copied_ud == NULL) {
+		module_put(pb_mod);
+		return -ENOMEM;
+	}
+
+	unsigned long error_count = copy_from_user(copied_ud, ud, sizeof(*copied_ud));
+	if (error_count != 0) {
+		kfree(copied_ud);
+		module_put(pb_mod);
+		return -EFAULT;
+	}
+
+	long result = func(copied_ud);
+
+	kfree(copied_ud);
+	module_put(pb_mod);
+	return result;
+}
+
+SYSCALL_DEFINE3(get_user, const char* __user, last_name, unsigned int, len, struct pb_user_data* __user, ud) {
+	struct module* pb_mod = find_pb_module();
+	if (pb_mod == NULL) {
+		return -ENODEV;
+	}
+
+	// Поиск по kernel/module/kallsyms.c дал результаты, удалось найти функцию,
+	//   которая ищет в модуле, если у нас есть struct module*, заданный
+	//   символ.
+	// Значением символа с названием функции будет ее адрес в памяти,
+	//   занятой модулем после загрузки.
+	pb_get_user_t func = (pb_get_user_t) find_kallsyms_symbol_value(pb_mod, "pb_get_user");
+	if (func == NULL) {
+		// Мы "брали" модуль (увеличивали счетчик ссылок), теперь положим,
+		//   чтобы его могли выгрузить при необходимости.
+		module_put(pb_mod);
+		return -ENODEV;
+	}
+
+	char* copied_last_name = kzalloc(len, GFP_KERNEL_ACCOUNT);
+	if (copied_last_name == NULL) {
+		module_put(pb_mod);
+		return -ENOMEM;
+	}
+
+	if (len == 0) {
+		// Copy to user returns number of bytes not copied.
+		//   Which means on success it returns 0.
+		//   But if the length is zero, then there should be
+		//   no errors, it seems. Let's check for this.
+		//   Also my code elsewhere should check for it, but
+		//   I didn't think about this case before. Like I was
+		//   writing a general and more practical case :)
+		//   We can always add some defense programming in play :)
+		kfree(copied_last_name);
+		module_put(pb_mod);
+		return -EINVAL;
+	}
+
+	unsigned long error_count = copy_from_user(copied_last_name, last_name, len);
+	if (error_count != 0) {
+		kfree(copied_last_name);
+		module_put(pb_mod);
+		return -EFAULT;
+	}
+
+	struct pb_user_data* ud_to_copy = kzalloc(sizeof(struct pb_user_data), GFP_KERNEL_ACCOUNT);
+	if (ud_to_copy == NULL) {
+		kfree(copied_last_name);
+		module_put(pb_mod);
+		return -ENOMEM;
+	}
+
+	long result = func(copied_last_name, len, ud_to_copy);
+
+	error_count = copy_to_user(ud, ud_to_copy, sizeof(*ud_to_copy)); 
+	if (error_count != 0) {
+		kfree(copied_last_name);
+		kfree(ud_to_copy);
+		module_put(pb_mod);
+		return -EFAULT;		
+	}
+
+	kfree(copied_last_name);
+	kfree(ud_to_copy);
+	module_put(pb_mod);
+	return result;
+}
+
+SYSCALL_DEFINE2(del_user, const char* __user, last_name, unsigned int, len) {
+	struct module* pb_mod = find_pb_module();
+	if (pb_mod == NULL) {
+		return -ENODEV;
+	}
+
+	// Поиск по kernel/module/kallsyms.c дал результаты, удалось найти функцию,
+	//   которая ищет в модуле, если у нас есть struct module*, заданный
+	//   символ.
+	// Значением символа с названием функции будет ее адрес в памяти,
+	//   занятой модулем после загрузки.
+	pb_del_user_t func = (pb_del_user_t) find_kallsyms_symbol_value(pb_mod, "pb_del_user");
+	if (func == NULL) {
+		// Мы "брали" модуль (увеличивали счетчик ссылок), теперь положим,
+		//   чтобы его могли выгрузить при необходимости.
+		module_put(pb_mod);
+		return -ENODEV;
+	}
+
+	char* copied_last_name = kzalloc(len, GFP_KERNEL_ACCOUNT);
+	if (copied_last_name == NULL) {
+		module_put(pb_mod);
+		return -ENOMEM;
+	}
+
+	if (len == 0) {
+		// Copy to user returns number of bytes not copied.
+		//   Which means on success it returns 0.
+		//   But if the length is zero, then there should be
+		//   no errors, it seems. Let's check for this.
+		//   Also my code elsewhere should check for it, but
+		//   I didn't think about this case before. Like I was
+		//   writing a general and more practical case :)
+		//   We can always add some defense programming in play :)
+		kfree(copied_last_name);
+		module_put(pb_mod);
+		return -EINVAL;
+	}
+
+	unsigned long error_count = copy_from_user(copied_last_name, last_name, len);
+	if (error_count != 0) {
+		kfree(copied_last_name);
+		module_put(pb_mod);
+		return -EFAULT;
+	}
+
+	long result = func(copied_last_name, len);
+
+	kfree(copied_last_name);
+	module_put(pb_mod);
+	return result;
+}
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/ipc/phonebook/phonebook.h linux-6.11/ipc/phonebook/phonebook.h
--- linux-orig/linux-6.11/ipc/phonebook/phonebook.h	1970-01-01 03:00:00.000000000 +0300
+++ linux-6.11/ipc/phonebook/phonebook.h	2024-10-22 18:08:44.438999212 +0300
@@ -0,0 +1,82 @@
+#pragma once
+
+#include <linux/kernel.h>
+
+// https://stackoverflow.com/questions/9881357/what-is-the-linux-kernel-equivalent-to-the-memset-function
+// In sort, just include linux/string.h, because we don't want to confuse include path with c standard
+//   library.
+#include <linux/string.h>
+
+// Строки должны помещаться в 64 байта с учетом нулевого байта.
+//   В utf-8 символы русского языка занимают по 2 байта. Потому
+//   Можно будет поместить не более (64 - 1) / 2 (с округлением
+//   вниз) = 31 букву русского языка.
+struct pb_user_data {
+  char first_name[64];
+  char last_name[64];
+  unsigned int age;
+  char telnum[16];
+  char email[64];
+};
+#define PB_PRINT_USER_DATA(printf, ud, prefix, suffix) \
+  printf(                                              \
+    prefix "(%s, %s, %u, %s, %s)" suffix,              \
+    (ud).first_name,                                   \
+    (ud).last_name,                                    \
+    (ud).age,                                          \
+    (ud).telnum,                                       \
+    (ud).email                                         \
+  )
+
+#define cmp_char_array(lhs, rhs) strncmp(lhs, rhs, sizeof(lhs))
+static inline int pb_ud_cmp(const struct pb_user_data* ud1, const struct pb_user_data* ud2) {
+  int cmp = 0;
+
+  cmp = cmp_char_array(ud1->first_name, ud2->first_name);
+  if (cmp != 0) return cmp;
+
+  cmp = cmp_char_array(ud1->last_name, ud2->last_name);
+  if (cmp != 0) return cmp;
+
+  if (ud1->age != ud2->age) {
+    if (ud1->age < ud2->age) {
+      return -1;
+    }
+
+    return 1;
+  }
+
+  cmp = cmp_char_array(ud1->telnum, ud2->telnum);
+  if (cmp != 0) return cmp;
+
+  cmp = cmp_char_array(ud1->email, ud2->email);
+  if (cmp != 0) return cmp;
+
+  return 0;
+}
+#undef cmp_char_array
+
+static inline void pb_ud_init(struct pb_user_data* ud) {
+  memset(ud, 0, sizeof(*ud));
+}
+
+static const int PB_OPERATION_ADD               = 1;
+static const int PB_OPERATION_FIND_BY_LAST_NAME = 2; // Выдаст все pb_user_data с таким last_name
+static const int PB_OPERATION_FIND_BY_ID        = 3;
+static const int PB_OPERATION_DELETE            = 4; // Ищет по last_name, а затем среди них ищет то, что надо удалить, удаляет.
+
+#define PB_PHONEBOOK_SIZE 256
+#define PB_MSG_BUFFER_LEN sizeof(int) + sizeof(struct pb_user_data)
+
+static const char* const pb_path = "/dev/pbchar";
+static const char* const pb_by_lastname_path = "/dev/pb/by-lastname";
+// Напоминает /dev/by_label, когда ищется загрузочный раздел у установщика archlinux. 
+// Решил загуглить, чтобы была информация. Я просто несколько раз воочию видел.
+//   А можно еще почитать.
+//   https://yandex.ru/search/?text=dev+by_label&lr=213&clid=1836587
+//   Первые несколько ссылок посмотрел:
+//     https://zalinux.ru/?p=6662
+//     https://wiki.archlinux.org/title/Persistent_block_device_naming
+// Оказывается, там by-label, а не by_label. Ок.
+
+// ssize_t pb_add(
diff -ruNb --exclude '*include*' --exclude '*security*' --exclude '*inat*' linux-orig/linux-6.11/Kconfig linux-6.11/Kconfig
--- linux-orig/linux-6.11/Kconfig	2024-09-15 17:57:56.000000000 +0300
+++ linux-6.11/Kconfig	2024-10-22 20:12:15.138209808 +0300
@@ -30,3 +30,5 @@
 source "lib/Kconfig.debug"
 
 source "Documentation/Kconfig"
+
+source "ipc/phonebook/Kconfig"
Двоичные файлы linux-orig/linux-6.11/tools/objtool/fixdep и linux-6.11/tools/objtool/fixdep различаются
Двоичные файлы linux-orig/linux-6.11/tools/objtool/objtool и linux-6.11/tools/objtool/objtool различаются
